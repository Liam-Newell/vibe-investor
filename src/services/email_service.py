"""
Email Service for Trading Reports
Sends beautiful HTML reports generated by Claude
"""

import asyncio
import logging
import smtplib
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from typing import Dict, List, Any, Optional

import aiosmtplib
from jinja2 import Template

from src.core.config import settings
from src.models.options import OptionsPosition, PortfolioSummary

logger = logging.getLogger(__name__)

class EmailService:
    """Email service for sending trading reports"""
    
    def __init__(self, claude_service=None):
        self.claude_service = claude_service
        self.smtp_config = settings.get_email_config()
        
    async def send_morning_report(self, 
                                opportunities: List[Dict],
                                portfolio: PortfolioSummary,
                                market_data: Dict[str, Any],
                                claude_analysis: str) -> bool:
        """Send morning strategy report"""
        
        if not self.smtp_config["enabled"]:
            logger.info("📧 Email disabled - Morning report not sent")
            return False
            
        try:
            # Generate beautiful report with Claude
            report_html = await self._generate_morning_report_html(
                opportunities, portfolio, market_data, claude_analysis
            )
            
            subject = f"🌅 Vibe Investor Morning Report - {datetime.now().strftime('%Y-%m-%d')}"
            
            success = await self._send_email(
                to_email="liam-newell@hotmail.com",
                subject=subject,
                html_content=report_html
            )
            
            if success:
                logger.info("📧 ✅ Morning report sent successfully")
            else:
                logger.error("📧 ❌ Failed to send morning report")
                
            return success
            
        except Exception as e:
            logger.error(f"📧 ❌ Morning report error: {e}")
            return False
    
    async def send_evening_report(self,
                                portfolio: PortfolioSummary,
                                positions: List[OptionsPosition],
                                daily_trades: List[Dict],
                                performance_metrics: Dict[str, Any],
                                claude_review: Dict[str, Any]) -> bool:
        """Send evening performance report"""
        
        if not self.smtp_config["enabled"]:
            logger.info("📧 Email disabled - Evening report not sent")
            return False
            
        try:
            # Generate beautiful report with Claude
            report_html = await self._generate_evening_report_html(
                portfolio, positions, daily_trades, performance_metrics, claude_review
            )
            
            subject = f"🌆 Vibe Investor Evening Report - {datetime.now().strftime('%Y-%m-%d')}"
            
            success = await self._send_email(
                to_email="liam-newell@hotmail.com",
                subject=subject,
                html_content=report_html
            )
            
            if success:
                logger.info("📧 ✅ Evening report sent successfully")
            else:
                logger.error("📧 ❌ Failed to send evening report")
                
            return success
            
        except Exception as e:
            logger.error(f"📧 ❌ Evening report error: {e}")
            return False
    
    async def send_trade_alert(self, position: OptionsPosition, action: str, reason: str) -> bool:
        """Send immediate trade alert"""
        
        if not self.smtp_config["enabled"] or not self.smtp_config["trade_confirmations"]:
            return False
            
        try:
            html_content = await self._generate_trade_alert_html(position, action, reason)
            subject = f"🚨 Trade Alert: {action.upper()} {position.symbol}"
            
            return await self._send_email(
                to_email="liam-newell@hotmail.com",
                subject=subject,
                html_content=html_content
            )
            
        except Exception as e:
            logger.error(f"📧 ❌ Trade alert error: {e}")
            return False
    
    async def _generate_morning_report_html(self,
                                          opportunities: List[Dict],
                                          portfolio: PortfolioSummary,
                                          market_data: Dict[str, Any],
                                          claude_analysis: str) -> str:
        """Generate beautiful morning report HTML using Claude"""
        
        # Prepare data for Claude to format
        report_data = {
            "date": datetime.now().strftime("%A, %B %d, %Y"),
            "portfolio_value": f"${portfolio.total_value:,.2f}",
            "cash_balance": f"${portfolio.cash_balance:,.2f}",
            "open_positions": portfolio.open_positions,
            "market_data": market_data,
            "opportunities": opportunities,
            "claude_analysis": claude_analysis
        }
        
        if self.claude_service:
            try:
                # Ask Claude to create a beautiful HTML report
                prompt = f"""
                Create a beautiful, professional HTML email report for a trading system morning briefing.
                
                Data to include:
                {report_data}
                
                The report should be:
                1. Visually appealing with proper CSS styling
                2. Well-organized with clear sections
                3. Include color coding (green for positive, red for negative)
                4. Professional but engaging tone
                5. Easy to scan quickly
                
                Sections to include:
                - Header with date and portfolio snapshot
                - Market overview
                - Today's opportunities with specific details
                - Risk assessment
                - Action items
                
                Generate complete HTML with inline CSS. Make it look like a professional financial report.
                """
                
                claude_html = await self.claude_service._query_claude(prompt, "email_report")
                
                # Extract HTML from Claude's response
                if "<html>" in claude_html.lower():
                    return claude_html
                else:
                    # Wrap in HTML if Claude didn't provide full HTML
                    return f"""
                    <html>
                    <head><title>Morning Trading Report</title></head>
                    <body style="font-family: Arial, sans-serif; margin: 20px;">
                    {claude_html}
                    </body>
                    </html>
                    """
                    
            except Exception as e:
                logger.warning(f"Claude HTML generation failed: {e}, using fallback template")
        
        # Fallback template if Claude is unavailable
        return self._fallback_morning_template(report_data)
    
    async def _generate_evening_report_html(self,
                                          portfolio: PortfolioSummary,
                                          positions: List[OptionsPosition],
                                          daily_trades: List[Dict],
                                          performance_metrics: Dict[str, Any],
                                          claude_review: Dict[str, Any]) -> str:
        """Generate beautiful evening report HTML using Claude"""
        
        # Calculate daily P&L
        daily_pnl = sum(pos.unrealized_pnl for pos in positions)
        daily_pnl_pct = (daily_pnl / portfolio.total_value) * 100 if portfolio.total_value > 0 else 0
        
        report_data = {
            "date": datetime.now().strftime("%A, %B %d, %Y"),
            "portfolio_value": f"${portfolio.total_value:,.2f}",
            "daily_pnl": f"${daily_pnl:,.2f}",
            "daily_pnl_pct": f"{daily_pnl_pct:+.2f}%",
            "total_pnl": f"${portfolio.total_pnl:,.2f}",
            "open_positions": portfolio.open_positions,
            "win_rate": f"{portfolio.win_rate:.1f}%",
            "positions": [
                {
                    "symbol": pos.symbol,
                    "strategy": pos.strategy_type,
                    "pnl": f"${pos.total_pnl:,.2f}",
                    "pnl_pct": f"{pos.pnl_percentage:+.1f}%",
                    "days_held": pos.days_held
                }
                for pos in positions
            ],
            "daily_trades": daily_trades,
            "performance": performance_metrics,
            "claude_review": claude_review
        }
        
        if self.claude_service:
            try:
                prompt = f"""
                Create a comprehensive, beautiful HTML email report for end-of-day trading performance.
                
                Data to include:
                {report_data}
                
                The report should be:
                1. Professional financial report style with clean layout
                2. Color-coded performance metrics (green gains, red losses)
                3. Clear position breakdown with key metrics
                4. Performance attribution analysis
                5. Tomorrow's outlook section
                
                Sections to include:
                - Header with date and daily performance
                - Portfolio summary with key metrics
                - Individual position performance table
                - Today's trades summary
                - Risk analysis
                - Tomorrow's action items
                - Claude's market outlook
                
                Generate complete HTML with inline CSS. Make it comprehensive but easy to read.
                """
                
                claude_html = await self.claude_service._query_claude(prompt, "email_report")
                
                if "<html>" in claude_html.lower():
                    return claude_html
                else:
                    return f"""
                    <html>
                    <head><title>Evening Performance Report</title></head>
                    <body style="font-family: Arial, sans-serif; margin: 20px;">
                    {claude_html}
                    </body>
                    </html>
                    """
                    
            except Exception as e:
                logger.warning(f"Claude HTML generation failed: {e}, using fallback template")
        
        return self._fallback_evening_template(report_data)
    
    async def _generate_trade_alert_html(self, position: OptionsPosition, action: str, reason: str) -> str:
        """Generate trade alert HTML"""
        
        color = "green" if action.upper() in ["BUY", "OPEN"] else "red"
        
        return f"""
        <html>
        <head><title>Trade Alert</title></head>
        <body style="font-family: Arial, sans-serif; margin: 20px;">
            <div style="border: 3px solid {color}; padding: 20px; border-radius: 10px;">
                <h2 style="color: {color}; margin-top: 0;">🚨 Trade Alert</h2>
                <p><strong>Action:</strong> {action.upper()}</p>
                <p><strong>Symbol:</strong> {position.symbol}</p>
                <p><strong>Strategy:</strong> {position.strategy_type}</p>
                <p><strong>Position Size:</strong> ${position.entry_cost:,.2f}</p>
                <p><strong>Current P&L:</strong> ${position.total_pnl:,.2f} ({position.pnl_percentage:+.1f}%)</p>
                <p><strong>Reason:</strong> {reason}</p>
                <p><strong>Time:</strong> {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</p>
            </div>
        </body>
        </html>
        """
    
    def _fallback_morning_template(self, data: Dict) -> str:
        """Fallback morning report template"""
        
        opportunities_html = ""
        for opp in data["opportunities"]:
            opportunities_html += f"""
            <tr>
                <td>{opp.get('symbol', 'N/A')}</td>
                <td>{opp.get('strategy_type', 'N/A')}</td>
                <td>{opp.get('confidence', 0):.0%}</td>
                <td>${opp.get('target_return', 0):.2f}</td>
                <td>{opp.get('time_horizon', 0)} days</td>
            </tr>
            """
        
        return f"""
        <html>
        <head><title>Morning Trading Report</title></head>
        <body style="font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5;">
            <div style="max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                <h1 style="color: #2c3e50; text-align: center; margin-bottom: 30px;">🌅 Morning Trading Report</h1>
                <p style="text-align: center; color: #7f8c8d; font-size: 18px;">{data['date']}</p>
                
                <div style="background: #ecf0f1; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <h2 style="color: #34495e; margin-top: 0;">📊 Portfolio Snapshot</h2>
                    <p><strong>Total Value:</strong> {data['portfolio_value']}</p>
                    <p><strong>Cash Balance:</strong> {data['cash_balance']}</p>
                    <p><strong>Open Positions:</strong> {data['open_positions']}</p>
                </div>
                
                <div style="margin: 30px 0;">
                    <h2 style="color: #34495e;">🎯 Today's Opportunities</h2>
                    <table style="width: 100%; border-collapse: collapse; margin-top: 15px;">
                        <thead>
                            <tr style="background: #3498db; color: white;">
                                <th style="padding: 12px; text-align: left;">Symbol</th>
                                <th style="padding: 12px; text-align: left;">Strategy</th>
                                <th style="padding: 12px; text-align: left;">Confidence</th>
                                <th style="padding: 12px; text-align: left;">Target Return</th>
                                <th style="padding: 12px; text-align: left;">Time Horizon</th>
                            </tr>
                        </thead>
                        <tbody>
                            {opportunities_html}
                        </tbody>
                    </table>
                </div>
                
                <div style="background: #e8f5e8; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <h2 style="color: #27ae60; margin-top: 0;">🤖 Claude's Analysis</h2>
                    <p style="line-height: 1.6;">{data['claude_analysis'][:500]}...</p>
                </div>
                
                <p style="text-align: center; color: #95a5a6; margin-top: 30px;">
                    Generated by Vibe Investor at {datetime.now().strftime("%H:%M:%S")}
                </p>
            </div>
        </body>
        </html>
        """
    
    def _fallback_evening_template(self, data: Dict) -> str:
        """Fallback evening report template"""
        
        positions_html = ""
        for pos in data["positions"]:
            pnl_color = "#27ae60" if "+" in pos["pnl_pct"] else "#e74c3c"
            positions_html += f"""
            <tr>
                <td>{pos['symbol']}</td>
                <td>{pos['strategy']}</td>
                <td style="color: {pnl_color};">{pos['pnl']}</td>
                <td style="color: {pnl_color};">{pos['pnl_pct']}</td>
                <td>{pos['days_held']}</td>
            </tr>
            """
        
        daily_color = "#27ae60" if "+" in data["daily_pnl_pct"] else "#e74c3c"
        
        return f"""
        <html>
        <head><title>Evening Performance Report</title></head>
        <body style="font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5;">
            <div style="max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                <h1 style="color: #2c3e50; text-align: center; margin-bottom: 30px;">🌆 Evening Performance Report</h1>
                <p style="text-align: center; color: #7f8c8d; font-size: 18px;">{data['date']}</p>
                
                <div style="background: #ecf0f1; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <h2 style="color: #34495e; margin-top: 0;">📈 Daily Performance</h2>
                    <p><strong>Portfolio Value:</strong> {data['portfolio_value']}</p>
                    <p><strong>Daily P&L:</strong> <span style="color: {daily_color};">{data['daily_pnl']} ({data['daily_pnl_pct']})</span></p>
                    <p><strong>Total P&L:</strong> {data['total_pnl']}</p>
                    <p><strong>Win Rate:</strong> {data['win_rate']}</p>
                </div>
                
                <div style="margin: 30px 0;">
                    <h2 style="color: #34495e;">📋 Position Summary</h2>
                    <table style="width: 100%; border-collapse: collapse; margin-top: 15px;">
                        <thead>
                            <tr style="background: #e67e22; color: white;">
                                <th style="padding: 12px; text-align: left;">Symbol</th>
                                <th style="padding: 12px; text-align: left;">Strategy</th>
                                <th style="padding: 12px; text-align: left;">P&L</th>
                                <th style="padding: 12px; text-align: left;">P&L %</th>
                                <th style="padding: 12px; text-align: left;">Days Held</th>
                            </tr>
                        </thead>
                        <tbody>
                            {positions_html}
                        </tbody>
                    </table>
                </div>
                
                <div style="background: #fdf2e9; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <h2 style="color: #d35400; margin-top: 0;">📝 Claude's Evening Review</h2>
                    <p style="line-height: 1.6;">{data['claude_review'].get('summary', 'Review completed successfully.')[:500]}...</p>
                </div>
                
                <p style="text-align: center; color: #95a5a6; margin-top: 30px;">
                    Generated by Vibe Investor at {datetime.now().strftime("%H:%M:%S")}
                </p>
            </div>
        </body>
        </html>
        """
    
    async def _send_email(self, to_email: str, subject: str, html_content: str) -> bool:
        """Send email using aiosmtplib"""
        
        try:
            # Create message
            message = MIMEMultipart('alternative')
            message["From"] = f"Vibe Investor <{self.smtp_config['smtp_user']}>"
            message["To"] = to_email
            message["Subject"] = subject
            
            # Add HTML content
            html_part = MIMEText(html_content, 'html')
            message.attach(html_part)
            
            # Send email
            await aiosmtplib.send(
                message,
                hostname=self.smtp_config["smtp_server"],
                port=self.smtp_config["smtp_port"],
                start_tls=True,
                username=self.smtp_config["smtp_user"],
                password=self.smtp_config["smtp_password"]
            )
            
            return True
            
        except Exception as e:
            logger.error(f"📧 Email send failed: {e}")
            return False 